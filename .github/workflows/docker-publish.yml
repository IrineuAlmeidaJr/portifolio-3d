# Nome do seu workflow
name: Build and Publish Next.js Portfolio Docker Image

# Gatilhos: roda quando uma tag é criada ou manualmente
on:
  push:
    tags:
      - '*.*.*'  # Ex: v1.0.0, v1.2.3, etc.
  workflow_dispatch:

# Variáveis de ambiente para reutilização
env:
  REGISTRY: ghcr.io
  # O nome da imagem será algo como: ghcr.io/irineualmeidajr/portifolio-3d
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # 1. Baixa o código do seu repositório para o ambiente da Action
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configura o Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      # 3. Instala dependências
      - name: Install dependencies
        run: npm ci

      # 4. Executa linting
      - name: Run linting
        run: npm run lint

      # 5. Configura o Docker Buildx, que é o motor de build moderno do Docker
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      # 6. Faz o login no GitHub Container Registry (ghcr.io)
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 7. Extrai metadados (como tags) do evento do Git
      # Ex: Se você empurrar a tag 'v1.2.0', ele vai criar a tag de imagem '1.2.0'
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      # 8. O passo principal: constrói e envia a imagem
      # Ele vai encontrar e usar o seu Dockerfile multi-stage do Next.js
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 9. Output das informações da imagem criada
      - name: Image digest
        run: echo ${{ steps.meta.outputs.tags }} 
